DEF_CMD(push,   1, ONE_OPERAND,
	{
		if (MODE == NUMBER)
		{	
			PUSH(CODE[IP + 1]);
		}
		else if (MODE == REGISTR)
		{
			PUSH(REGISTER[CODE[IP + 1]]);
		}
		else if (MODE == (NUMBER | VRAM))
		{
			PUSH(VIDEORAM[CODE[IP + 1]]);
		}
		else if (MODE == (REGISTR | VRAM))
		{
			PUSH(VIDEORAM[(int)REGISTER[CODE[IP + 1]]]);
		}
		Sleep(0);
	})

DEF_CMD(pop,    3, ONE_OPERAND,
	{
		if (MODE == NUMBER || MODE == REGISTR)
		{
			double A = 0;
			POP(A);
			REGISTER[CODE[IP + 1]] = A;
		}
		else if (MODE == (NUMBER | VRAM)) 
		{
			double A = 0;
			POP(A);
			VIDEORAM[CODE[IP + 1]] = A;
		}
		else if (MODE == (REGISTR | VRAM))
		{
			double A = 0;
			POP(A);
			VIDEORAM[(int)REGISTER[CODE[IP + 1]]] = A;
		}
		Sleep(0);
	})

DEF_CMD(out,    5, ZERO_OPERAND,
	{
		double A = 0;
		POP(A);
		printf("%lf\n", A);
		Sleep(1);
	})

DEF_CMD(mul,    6, ZERO_OPERAND,
	{
		double A = 0, B = 0;
		POP(A);
		POP(B);
		PUSH(A * B);
		Sleep(1);
	})

DEF_CMD(sub,    7, ZERO_OPERAND,
	{
		double A = 0, B = 0;
		POP(A);
		POP(B);
		PUSH(B - A);
		Sleep(1);
	})

DEF_CMD(div,    8, ZERO_OPERAND,
	{
		double A = 0, B = 0;
		POP(A);
		POP(B);
		PUSH(B / A);
		Sleep(1);
	})

DEF_CMD(sqrt,   9, ZERO_OPERAND,
	{
		double A = 0;
		POP(A);
		PUSH(sqrt(A));
		Sleep(1);
	})
	
DEF_CMD(add,   10, ZERO_OPERAND,
	{
		double A = 0, B = 0;
		POP(A);
		POP(B);
		PUSH(A + B);
		Sleep(1);
	})

DEF_CMD(in,    11, ZERO_OPERAND,
	{
		double A = 0;
		scanf_s("%lf", &A);
		PUSH(A);
		Sleep(1);
	})

DEF_CMD(hlt,   0, ZERO_OPERAND,
	{
		goto out;
	})

DEF_CMD(ret, 20, ZERO_OPERAND,
	{
		double A = 0;
		StackPop(&processor.callStk, &A);
		IP = A;
		Sleep(1);
	})

DEF_CMD(SCAN, 22, ZERO_OPERAND,
	{
		for (int i = 0; i < 3 * (Y / PixelSize) * (X / PixelSize); i += 3) 
		{
			RectangleShape rectangle(Vector2f(PixelSize, PixelSize));

			// Перемещаем
			rectangle.move(PixelSize * ((i / 3) % (X / PixelSize)), PixelSize * (i / (3 * (X / PixelSize))));
			// Устанавливаем ему цвет
			rectangle.setFillColor(Color(VIDEORAM[i], VIDEORAM[i + 1], VIDEORAM[i + 2]));
			window.draw(rectangle);
		}
	})

DEF_CMD(DRAW, 23, ZERO_OPERAND,
	{
		window.display();
	})

DEF_CMD(STOP, 24, ZERO_OPERAND,
	{
		while (window.isOpen())
		{
			sf::Event event;
			while (window.pollEvent(event))
			{
				if (event.type == sf::Event::Closed)
					window.close();
			}
		}
	})

DEF_JMP(jmp , 12, * 0 *)
DEF_JMP(ja  , 13,     >)
DEF_JMP(jae , 14,    >=)
DEF_JMP(jb  , 15,     <)
DEF_JMP(jbe , 16,    <=)
DEF_JMP(je  , 17,    ==)
DEF_JMP(jde , 18,    !=)
DEF_JMP(call, 19, * 0 *)
